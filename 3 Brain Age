"""
General: Brain Age prediction based on different segmentations and models
- Cross validation on training data
- Models: Lasso, Ridge, SVR
- Segmentations: Freesurfer ASEG, xyz
- MAE, plots
- Add Brain Age for different segmentations to dataset

ToDo
- different segmentations
- imputing

"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LassoCV, RidgeCV
from sklearn.svm import SVR
from sklearn.experimental import enable_iterative_imputer 
from sklearn.impute import IterativeImputer
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import *
from random import seed
from scipy import stats
from sklearn.linear_model import LinearRegression

seed(888)

# load data from pickle and convert to dataframe
brain_test = pd.read_pickle("2_brain_test.pkl")
brain_train = pd.read_pickle("2_brain_train.pkl")
main_test = pd.read_pickle("2_main_test.pkl")
main_train = pd.read_pickle("2_main_train.pkl")
brain_test = pd.DataFrame(brain_test)
brain_train = pd.DataFrame(brain_train)
main_test = pd.DataFrame(main_test)
main_train = pd.DataFrame(main_train)



# Freesurfer ASEG
whole_brain = brain_train.iloc[:,27:70:2]
left_hemi = brain_train.iloc[:,103:134:2]
right_hemi = brain_train.iloc[:,165:196:2]
age = brain_train["Age"]
brain_train_s = pd.concat([whole_brain,left_hemi, right_hemi,age],axis = 1)

whole_brain = brain_test.iloc[:,27:70:2]
left_hemi = brain_test.iloc[:,103:134:2]
right_hemi = brain_test.iloc[:,165:196:2]
age = brain_test["Age"]
brain_test_s = pd.concat([whole_brain,left_hemi, right_hemi,age],axis = 1)
brain_train_s = pd.DataFrame(brain_train_s)
brain_test_s = pd.DataFrame(brain_test_s)

# delete rows with nan values
nan_test = brain_test_s[brain_test_s.isnull().any(axis=1)].index
nan_train = brain_train_s[brain_train_s.isnull().any(axis=1)].index
brain_testing = brain_test_s.dropna(axis=0)
brain_training = brain_train_s.dropna(axis=0)
main_test = main_test.drop(nan_test)
main_train = main_train.drop(nan_train)


# # impute nan values in mri data
# # imp_mean = IterativeImputer(random_state=0)
# # imp_mean.fit_transform(df[:,:-1])

# declare training and testing data - X: brain variables, Y: actual age
X_train = brain_training.iloc[:,:-1]
Y_train = brain_training.iloc[:,-1]
X_test = brain_testing.iloc[:,:-1]
Y_test = brain_testing.iloc[:,-1]

# set of alphas to try
alpha_parameters = np.power(10,np.linspace(start=-3, stop=5, num=100))

# standardize x data
scaler = StandardScaler()

X_train_std = scaler.fit_transform(X_train)
X_test_std = scaler.fit_transform(X_test)

# cross validation on training set only
X_CV = X_train_std
Y_CV = Y_train
# randomly split data into training and testing set
X_train_cv, X_test_cv, Y_train_cv, Y_test_cv = train_test_split(X_CV,Y_CV, random_state=8)
model = RidgeCV(alphas = alpha_parameters)
model.fit(X_train_cv,Y_train_cv)
y_pred_cv = model.predict(X_test_cv)
delta_cv = y_pred_cv - Y_test_cv
print("The MAE for cross-validation:", mean_absolute_error(Y_test_cv,y_pred_cv))

delta_cv = np.asarray(delta_cv)
delta_cv = np.reshape(delta_cv, (-1,1))
Y_test_cv = np.asarray(Y_test_cv)
Y_test_cv = np.reshape(Y_test_cv, (-1,1))

# brain age correction
reg = LinearRegression().fit(delta_cv, Y_test_cv)
coef = reg.coef_
intercept = reg.intercept_




# model on trained on training tested on test
# model initialization - options to use Lasso, Ridge or SVM
#model = LassoCV(alphas = alpha_parameters, max_iter=100000)
#model = RidgeCV(alphas = alpha_parameters)
model = SVR(kernel = 'rbf')

# train model
model.fit(X_train_std,Y_train)

# get predicted values for test set
y_pred = model.predict(X_test_std)
main_test["BrainAge"] = y_pred

# calculate brain age gap
brain_age_delta = y_pred-Y_test
main_test["BrainAge Delta"] = brain_age_delta

# check whether brain age gap and age are correlated
correlation = stats.pearsonr(brain_age_delta, Y_test)
#print(correlation)


# corrected brain age
function = lambda t: coef * t + intercept
vfunc = np.vectorize(function)
offset = vfunc(Y_test)
corr_brainage = y_pred-offset
corr_brainage_delta = corr_brainage-Y_test

main_test["BrainAge Corr"] = corr_brainage
main_test["BrainAge Delta Corr"] = corr_brainage_delta

# get mean absolute error (MAE)
print("The MAE for testing set:", mean_absolute_error(Y_test,y_pred))

# #plot figure with x: actual age Y: predicted age, and a line with slope 1 for reference
# plt.figure()
# plt.scatter(Y_test, y_pred, alpha=0.5)
# plt.axline((60,60), slope=1, color='r')
# plt.xticks(range(40,90,5))
# plt.yticks(range(40,90,5))
# plt.ylabel('Predicted Age', fontsize = 15)
# plt.xlabel('Age', fontsize = 15)
# plt.show()

# plt.figure()
# plt.scatter(Y_test,brain_age_delta, alpha=0.5)
# plt.axline((60,5), slope=-0.69, color="r")
# plt.axline((60,0),slope=0, color = "g")
# plt.ylabel("Brain Age Delta", fontsize = 15)
# plt.xlabel("Age", fontsize = 15)
# plt.show()


# add to pickle brain age based on different segmentations :)




main_test.to_pickle("3_main_test.pkl")
main_train.to_pickle("3_main_train.pkl")
brain_test.to_pickle("3_brain_test.pkl")
brain_train.to_pickle("3_brain_train.pkl")